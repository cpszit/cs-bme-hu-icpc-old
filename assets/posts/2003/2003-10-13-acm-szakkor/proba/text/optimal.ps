%!PS-Adobe-2.0
%%Creator: dvipsk 5.58f Copyright 1986, 1994 Radical Eye Software
%%Title: final.dvi
%%Pages: 2 0
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: Times-Bold Times-Roman Courier Symbol Times-Italic
%%EndComments
%DVIPSCommandLine: dvips final
%DVIPSParameters: dpi=600, compressed, comments removed
%DVIPSSource:  TeX output 1998.11.05:0343
%%BeginProcSet: texc.pro
/TeXDict 250 dict def TeXDict begin /N{def}def /B{bind def}N /S{exch}N
/X{S N}B /TR{translate}N /isls false N /vsize 11 72 mul N /hsize 8.5 72
mul N /landplus90{false}def /@rigin{isls{[0 landplus90{1 -1}{-1 1}
ifelse 0 0 0]concat}if 72 Resolution div 72 VResolution div neg scale
isls{landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div
hsize mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul
TR[matrix currentmatrix{dup dup round sub abs 0.00001 lt{round}if}
forall round exch round exch]setmatrix}N /@landscape{/isls true N}B
/@manualfeed{statusdict /manualfeed true put}B /@copies{/#copies X}B
/FMat[1 0 0 -1 0 0]N /FBB[0 0 0 0]N /nn 0 N /IE 0 N /ctr 0 N /df-tail{
/nn 8 dict N nn begin /FontType 3 N /FontMatrix fntrx N /FontBBox FBB N
string /base X array /BitMaps X /BuildChar{CharBuilder}N /Encoding IE N
end dup{/foo setfont}2 array copy cvx N load 0 nn put /ctr 0 N[}B /df{
/sf 1 N /fntrx FMat N df-tail}B /dfs{div /sf X /fntrx[sf 0 0 sf neg 0 0]
N df-tail}B /E{pop nn dup definefont setfont}B /ch-width{ch-data dup
length 5 sub get}B /ch-height{ch-data dup length 4 sub get}B /ch-xoff{
128 ch-data dup length 3 sub get sub}B /ch-yoff{ch-data dup length 2 sub
get 127 sub}B /ch-dx{ch-data dup length 1 sub get}B /ch-image{ch-data
dup type /stringtype ne{ctr get /ctr ctr 1 add N}if}B /id 0 N /rw 0 N
/rc 0 N /gp 0 N /cp 0 N /G 0 N /sf 0 N /CharBuilder{save 3 1 roll S dup
/base get 2 index get S /BitMaps get S get /ch-data X pop /ctr 0 N ch-dx
0 ch-xoff ch-yoff ch-height sub ch-xoff ch-width add ch-yoff
setcachedevice ch-width ch-height true[1 0 0 -1 -.1 ch-xoff sub ch-yoff
.1 sub]/id ch-image N /rw ch-width 7 add 8 idiv string N /rc 0 N /gp 0 N
/cp 0 N{rc 0 ne{rc 1 sub /rc X rw}{G}ifelse}imagemask restore}B /G{{id
gp get /gp gp 1 add N dup 18 mod S 18 idiv pl S get exec}loop}B /adv{cp
add /cp X}B /chg{rw cp id gp 4 index getinterval putinterval dup gp add
/gp X adv}B /nd{/cp 0 N rw exit}B /lsh{rw cp 2 copy get dup 0 eq{pop 1}{
dup 255 eq{pop 254}{dup dup add 255 and S 1 and or}ifelse}ifelse put 1
adv}B /rsh{rw cp 2 copy get dup 0 eq{pop 128}{dup 255 eq{pop 127}{dup 2
idiv S 128 and or}ifelse}ifelse put 1 adv}B /clr{rw cp 2 index string
putinterval adv}B /set{rw cp fillstr 0 4 index getinterval putinterval
adv}B /fillstr 18 string 0 1 17{2 copy 255 put pop}for N /pl[{adv 1 chg}
{adv 1 chg nd}{1 add chg}{1 add chg nd}{adv lsh}{adv lsh nd}{adv rsh}{
adv rsh nd}{1 add adv}{/rc X nd}{1 add set}{1 add clr}{adv 2 chg}{adv 2
chg nd}{pop nd}]dup{bind pop}forall N /D{/cc X dup type /stringtype ne{]
}if nn /base get cc ctr put nn /BitMaps get S ctr S sf 1 ne{dup dup
length 1 sub dup 2 index S get sf div put}if put /ctr ctr 1 add N}B /I{
cc 1 add D}B /bop{userdict /bop-hook known{bop-hook}if /SI save N @rigin
0 0 moveto /V matrix currentmatrix dup 1 get dup mul exch 0 get dup mul
add .99 lt{/QV}{/RV}ifelse load def pop pop}N /eop{SI restore userdict
/eop-hook known{eop-hook}if showpage}N /@start{userdict /start-hook
known{start-hook}if pop /VResolution X /Resolution X 1000 div /DVImag X
/IE 256 array N 0 1 255{IE S 1 string dup 0 3 index put cvn put}for
65781.76 div /vsize X 65781.76 div /hsize X}N /p{show}N /RMat[1 0 0 -1 0
0]N /BDot 260 string N /rulex 0 N /ruley 0 N /v{/ruley X /rulex X V}B /V
{}B /RV statusdict begin /product where{pop product dup length 7 ge{0 7
getinterval dup(Display)eq exch 0 4 getinterval(NeXT)eq or}{pop false}
ifelse}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale rulex ruley false
RMat{BDot}imagemask grestore}}{{gsave TR -.1 .1 TR rulex ruley scale 1 1
false RMat{BDot}imagemask grestore}}ifelse B /QV{gsave newpath transform
round exch round exch itransform moveto rulex 0 rlineto 0 ruley neg
rlineto rulex neg 0 rlineto fill grestore}B /a{moveto}B /delta 0 N /tail
{dup /delta X 0 rmoveto}B /M{S p delta add tail}B /b{S p tail}B /c{-4 M}
B /d{-3 M}B /e{-2 M}B /f{-1 M}B /g{0 M}B /h{1 M}B /i{2 M}B /j{3 M}B /k{
4 M}B /w{0 rmoveto}B /l{p -4 w}B /m{p -3 w}B /n{p -2 w}B /o{p -1 w}B /q{
p 1 w}B /r{p 2 w}B /s{p 3 w}B /t{p 4 w}B /x{0 S rmoveto}B /y{3 2 roll p
a}B /bos{/SS save N}B /eos{SS restore}B end
%%EndProcSet
%%BeginFont: Times-Bold
% @psencodingfile{
%   author = "P. MacKay, Alan Jeffrey, S. Rahtz, K. Berry, B. Horn",
%   version = "0.2",
%   date = "7 September 94",
%   filename = "8r.enc",
%   email = "kb@cs.umb.edu",
%   address = "135 Center Hill Rd. // Plymouth, MA 02360",
%   codetable = "ISO/ASCII",
%   checksum = "xx",
%   docstring = "Encoding for TrueType or Type 1 fonts to be used with TeX."
% }
% 
% Idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard Encoding + ISO Latin 1 + extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are in their Windows ANSI positions,
% because Windows users cannot easily reencode the fonts, and it makes
% no difference on other systems. The only Windows ANSI characters not
% available are those that make no sense for typesetting -- rubout
% (127 decimal), nobreakspace (160), softhyphen (173).
% 
% (2) The caron and dotlessi characters are in the positions used by
% Y&Y for their modified ATM encoding.
% 
% (3) Remaining characters are assigned arbitrarily to the first few
% positions.
% 
% (4) (Y&Y) Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x10.
% 
% (5) Remaining positions left undefined are for use in (hopefully)
% upward-compatible revisions, if someday more characters are generally
% available in the Type 1 fonts.
% 
% Ligatures are omitted, since this encoding is intended for use at the
% driver end. Including ligatures and kerns would make the TFM files
% much larger, to no particular purpose. If someone actually wants to
% typeset in this encoding, they can pick a different name, and regenerate
% the fonts.
 
/TeXBase1Encoding [
% 0x00 (encoded characters from Adobe Standard not in Windows 3.1)
  /breve /dotaccent /fi /fl
  /fraction /hungarumlaut /Lslash /lslash
  /ogonek /ring /tilde /minus
  % These are the only two remaining unencoded characters, so may as
  % well include them.
  /Zcaron /zcaron /.notdef /.notdef
% 0x10 (TeX characters from, e.g., Lucida Bright)
 /dotlessj /ff /ffi /ffl /.notdef /.notdef /.notdef /.notdef
 /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
% 0x20 (ASCII begins)
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quotesingle
 /parenleft /parenright /asterisk /plus /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three /four /five /six /seven
 /eight /nine /colon /semicolon /less /equal /greater /question
% 0x40
 /at /A /B /C /D /E /F /G /H /I /J /K /L /M /N /O
% 0x50
 /P /Q /R /S /T /U /V /W
 /X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
% 0x60
 /grave /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o
% 0x70
 /p /q /r /s /t /u /v /w
 /x /y /z /braceleft /bar /braceright /asciitilde
 /.notdef % rubout; ASCII ends
% 0x80
 /.notdef /.notdef /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE
 /caron % Y&Y
 /.notdef
 /.notdef
% 0x90
 /.notdef /quoteleft /quoteright /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tildeaccent /trademark /scaron /guilsinglright
 /oe
 /dotlessi % Y&Y
 /.notdef
 /Ydieresis
% 0xA0
 /.notdef % nobreakspace
 /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot
 /hyphen % Y&Y (also at 45); Windows' softhyphen
 /registered
 /macron
% 0xD0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def
%%EndFont
%%BeginProcSet: texps.pro
TeXDict begin /rf{findfont dup length 1 add dict begin{1 index /FID ne 2
index /UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]/Metrics
exch def dict begin Encoding{exch dup type /integertype ne{pop pop 1 sub
dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get div def}
ifelse}forall Metrics /Metrics currentdict end def[2 index currentdict
end definefont 3 -1 roll makefont /setfont load]cvx def}def
/ObliqueSlant{dup sin S cos div neg}B /SlantFont{4 index mul add}def
/ExtendFont{3 -1 roll mul exch}def /ReEncodeFont{/Encoding exch def}def
end
%%EndProcSet
%%BeginProcSet: special.pro
TeXDict begin /SDict 200 dict N SDict begin /@SpecialDefaults{/hs 612 N
/vs 792 N /ho 0 N /vo 0 N /hsc 1 N /vsc 1 N /ang 0 N /CLIP 0 N /rwiSeen
false N /rhiSeen false N /letter{}N /note{}N /a4{}N /legal{}N}B
/@scaleunit 100 N /@hscale{@scaleunit div /hsc X}B /@vscale{@scaleunit
div /vsc X}B /@hsize{/hs X /CLIP 1 N}B /@vsize{/vs X /CLIP 1 N}B /@clip{
/CLIP 2 N}B /@hoffset{/ho X}B /@voffset{/vo X}B /@angle{/ang X}B /@rwi{
10 div /rwi X /rwiSeen true N}B /@rhi{10 div /rhi X /rhiSeen true N}B
/@llx{/llx X}B /@lly{/lly X}B /@urx{/urx X}B /@ury{/ury X}B /magscale
true def end /@MacSetUp{userdict /md known{userdict /md get type
/dicttype eq{userdict begin md length 10 add md maxlength ge{/md md dup
length 20 add dict copy def}if end md begin /letter{}N /note{}N /legal{}
N /od{txpose 1 0 mtx defaultmatrix dtransform S atan/pa X newpath
clippath mark{transform{itransform moveto}}{transform{itransform lineto}
}{6 -2 roll transform 6 -2 roll transform 6 -2 roll transform{
itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll curveto}}{{
closepath}}pathforall newpath counttomark array astore /gc xdf pop ct 39
0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}if}N
/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1 -1
scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3 get
ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip yflip
not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub neg 0
TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{noflips{TR
pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop 90 rotate 1
-1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg
TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr 1 get neg
sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr 2 get ppr
0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4 -1 roll add
2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S TR}if}N /cp
{pop pop showpage pm restore}N end}if}if}N /normalscale{Resolution 72
div VResolution 72 div neg scale magscale{DVImag dup scale}if 0 setgray}
N /psfts{S 65781.76 div N}N /startTexFig{/psf$SavedState save N userdict
maxlength dict begin /magscale true def normalscale currentpoint TR
/psf$ury psfts /psf$urx psfts /psf$lly psfts /psf$llx psfts /psf$y psfts
/psf$x psfts currentpoint /psf$cy X /psf$cx X /psf$sx psf$x psf$urx
psf$llx sub div N /psf$sy psf$y psf$ury psf$lly sub div N psf$sx psf$sy
scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub TR
/showpage{}N /erasepage{}N /copypage{}N /p 3 def @MacSetUp}N /doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N /endTexFig{end psf$SavedState restore}N /@beginspecial{SDict
begin /SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count /ocount X /dcount countdictstack N}N /@setspecial
{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if /showpage{}N /erasepage{}N /copypage{}N newpath
}N /@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{
end}repeat grestore SpecialSave restore end}N /@defspecial{SDict begin}
N /@fedspecial{end}B /li{lineto}B /rl{rlineto}B /rc{rcurveto}B /np{
/SaveX currentpoint /SaveY X N 1 setlinecap newpath}N /st{stroke SaveX
SaveY moveto}N /fil{fill SaveX SaveY moveto}N /ellipse{/endangle X
/startangle X /yrad X /xrad X /savematrix matrix currentmatrix N TR xrad
yrad scale 0 0 1 startangle endangle arc savematrix setmatrix}N end
%%EndProcSet
TeXDict begin 39158280 55380996 1000 600 600 (final.dvi)
@start /Fa 3 123 df<EB3FFC48B57E4814E04880488048809038F00FFE9038E001FF80
6F7E6C48133F6C4880C8121FA491B5FC130F137F48B6FC12075A48EBC01F383FFC00EA7F
E0138048C7FC5AA46C143FA26C6C137F9038C001FF263FF80FEBFFC06CB712E0A2000714
F76C14C3C6020013C0D93FF090C7FC2B2A7CA830>97 D<EA3FFC487E12FFA2127F123F12
00AAEC03FE91381FFF80027F13E091B57E90B612FC82ECFE079138F001FF4A6C13804A13
7F4AEB3FC091C7121F4915E0160FA217F01607A8160FA217E07F161F6EEB3FC0A26EEB7F
806E13FFDAF00313009138FC0FFE91B55A5E495CD97E7F13C0D93C1F90C7FC90380003FC
2C3980B730>I<001FB612FC4815FE5AA316FC90C7EA0FF8ED1FF0ED3FE0ED7FC0EDFF80
003E491300C7485A4A5A4A5A4A5A4A5A4A5A4A5A4990C7FC495A495A495A495A495A495A
4948133E4890C7127F485A485A485A485A485A48B7FCB8FCA46C15FE28277DA630>122
D E /Fb 26[93 229[{}1 131.399017 /Symbol rf /Fd 1 1 df<B81280A329037B91
34>0 D E /Fe 134[29 29 9[33 48 1[29 1[18 7[33 97[{
TeXBase1Encoding ReEncodeFont}7 66.666664 /Times-Italic
rf /Ff 2 62 df<140EB3A3B812E0A3C7000EC8FCB3A32B2D7CA634>43
D<007FB712C0B812E0A2CBFCABB812E0A26C16C02B117C9834>61
D E /Fg 256[{}0 66.666664 /Symbol rf /Fh 3 62 df<1430147014E0EB01C0EB03
801307EB0F00131E133E133C5B13F85B12015B1203A2485AA2120F5BA2121F90C7FCA25A
A3123E127EA6127C12FCB2127C127EA6123E123FA37EA27F120FA27F1207A26C7EA21201
7F12007F13787F133E131E7FEB07801303EB01C0EB00E014701430145A77C323>40
D<12C07E12707E7E121E7E6C7E7F12036C7E7F12007F1378137CA27FA2133F7FA2148013
0FA214C0A3130714E0A6130314F0B214E01307A614C0130FA31480A2131F1400A25B133E
A25BA2137813F85B12015B485A12075B48C7FC121E121C5A5A5A5A145A7BC323>I<007F
B912E0BA12F0A26C18E0CDFCAE007FB912E0BA12F0A26C18E03C167BA147>61
D E /Fi 169[45 12[45 4[45 20[45 47[{TeXBase1Encoding ReEncodeFont}4
75.000000 /Courier rf /Fj 136[54 2[21 29 25 1[37 37 37
1[21 2[21 37 37 1[33 37 33 1[33 12[46 3[42 12[50 19[21
19 1[19 42 43[{TeXBase1Encoding ReEncodeFont}22 75.000000
/Times-Roman rf /Fk 206[29 49[{TeXBase1Encoding ReEncodeFont}1
58.333336 /Times-Roman rf /Fl 10 107 df<007FB812FEBAFCA26C17FE3804799847
>0 D<EB0FFCEB3FFF90B512C0000314F04880488048804880A2481580A3B712C0AA6C15
80A36C1500A26C5C6C5C6C5C6C5CC614C0013F90C7FCEB0FFC22227BA72D>15
D<0203B612FE023F15FF91B8FC010316FED90FFEC9FCEB1FE0EB7F8001FECAFCEA01F848
5A485A485A5B48CBFCA2123EA25AA21278A212F8A25AA77EA21278A2127CA27EA27EA26C
7E7F6C7E6C7E6C7EEA00FEEB7F80EB1FE0EB0FFE0103B712FE010016FF143F020315FE91
CAFCAE001FB812FE4817FFA26C17FE384779B947>18 D<180E183F18FFEF03FEEF0FF8EF
3FE0EFFF80933803FE00EE1FF8EE7FE0923801FF80DB07FEC7FCED1FF0ED7FC04A48C8FC
EC07FCEC3FF0ECFFC0010390C9FCEB0FFCEB3FE0EBFF80D803FECAFCEA0FF8EA3FE0EAFF
8048CBFC6C7EEA7FE0EA0FF8EA03FEC66C7EEB3FE0EB0FFCEB03FF010013C0EC3FF0EC07
FCEC01FF9138007FC0ED1FF0ED07FE923801FF809238007FE0EE1FF8EE03FE933800FF80
EF3FE0EF0FF8EF03FEEF00FF183F180E1800AE007FB812FEBAFCA26C17FE384779B947>
20 D<0203B512F8023F14FC91B6FC010315F8D90FFEC8FCEB1FE0EB7F8001FEC9FCEA01
F8485A485A485A5B48CAFCA2123EA25AA21278A212F8A25AA2B812F817FCA217F800F0CA
FCA27EA21278A2127CA27EA27EA26C7E7F6C7E6C7E6C7EEA00FEEB7F80EB1FE0EB0FFE01
03B612F8010015FC143F020314F82E3679B13D>50 D<1718173C177CA217F8A2EE01F0A2
EE03E0A2EE07C0160F1780EE1F00A2163EA25EA25EA24B5AA24B5AA24B5AA24B5AA24BC7
FCA2153E157E157C5DA24A5AA24A5AA24A5AA24A5AA24AC8FCA2143EA25CA25C13015C49
5AA2495AA2495AA249C9FCA2133EA25BA25BA2485AA2485AA2485A120F5B48CAFCA2123E
A25AA25AA25A12602E5474C000>54 D<EC1FFE49B512E0010714F8011F14FE903A7FF003
FF804848C7EA3FE0D803FCEC0FF0D807F0EC03F8D80FC0EC00FC4848157E48C97E003E82
48EE0F80A20078160700F817C0A2481603B3B3A30060EE018032397BB63D>92
D<153FEC03FFEC0FE0EC3F80EC7E00495A5C495AA2495AB3AA130F5C131F495A91C7FC13
FEEA03F8EA7FE048C8FCEA7FE0EA03F8EA00FE133F806D7E130F801307B3AA6D7EA26D7E
80EB007EEC3F80EC0FE0EC03FFEC003F205B7AC32D>102 D<12FCEAFFC0EA07F0EA01FC
EA007E6D7E131F6D7EA26D7EB3AA801303806D7E1300147FEC1FC0EC07FEEC00FFEC07FE
EC1FC0EC7F0014FC1301495A5C13075CB3AA495AA2495A133F017EC7FC485AEA07F0EAFF
C000FCC8FC205B7AC32D>I<126012F0B3B3B3B3B11260045B76C319>106
D E /Fm 4 63 df<121EEA7F80A2EAFFC0A4EA7F80A2EA1E000A0A798919>58
D<121EEA7F8012FF13C0A213E0A3127FEA1E601200A413E013C0A312011380120313005A
120E5A1218123812300B1C798919>I<1806181F187FEF01FFEF07FCEF1FF0EF7FC09338
01FF00EE07FCEE3FF0EEFFC0030390C7FCED0FFCED3FE0EDFF80DA03FEC8FCEC0FF8EC7F
E0903801FF80D907FEC9FCEB1FF8EB7FC04848CAFCEA07FCEA1FF0EA7FC048CBFCA2EA7F
C0EA1FF0EA07FCEA01FF38007FC0EB1FF8EB07FE903801FF809038007FE0EC0FF8EC03FE
913800FF80ED3FE0ED0FFCED03FF030013C0EE3FF0EE07FCEE01FF9338007FC0EF1FF0EF
07FCEF01FFEF007F181F1806383679B147>I<126012F812FE6C7EEA3FE0EA0FF8EA03FE
C66C7EEB3FE0EB0FFCEB03FF010013C0EC3FF0EC07FCEC01FF9138007FC0ED1FF0ED07FE
923801FF809238007FE0EE1FF8EE03FE933800FF80EF3FE0EF0FF8EF03FEEF00FFA2EF03
FEEF0FF8EF3FE0EFFF80933803FE00EE1FF8EE7FE0923801FF80DB07FEC7FCED1FF0ED7F
C04A48C8FCEC07FCEC3FF0ECFFC0010390C9FCEB0FFCEB3FE0EBFF80D803FECAFCEA0FF8
EA3FE0EAFF8048CBFC12F81260383679B147>62 D E /Fn 134[40
40 61 40 45 25 35 35 45 45 45 45 66 25 40 1[25 45 45
25 40 45 40 45 45 12[51 45 56 8[30 2[56 1[66 1[56 20[30
42[45 2[{TeXBase1Encoding ReEncodeFont}33 91.249977 /Times-Italic
rf /Fo 207[45 25 47[{}2 91.249977 /Symbol rf /Fp 205[33
33 49[{TeXBase1Encoding ReEncodeFont}2 66.666664 /Times-Roman
rf /Fq 133[55 55 55 55 55 55 55 55 55 55 55 55 55 55
55 55 1[55 55 55 55 55 55 55 55 55 8[55 1[55 55 55 55
2[55 2[55 55 2[55 55 55 55 55 55 55 55 55 3[55 3[55 55
55 55 55 55 55 55 55 55 1[55 55 55 55 55 55 55 2[55 37[{
TeXBase1Encoding ReEncodeFont}61 91.249977 /Courier rf
/Fr 105[45 1[40 40 24[40 45 45 66 45 45 25 35 30 45 45
45 45 71 25 45 25 25 45 45 30 40 45 40 45 40 30 6[66
1[86 66 66 56 51 61 1[51 66 66 81 56 2[30 66 66 51 56
66 61 61 66 1[40 3[25 25 45 45 45 45 45 45 45 45 45 45
25 23 30 23 2[30 30 30 35[51 51 2[{TeXBase1Encoding ReEncodeFont}73
91.249977 /Times-Roman rf /Fs 131[60 5[60 60 60 60 60
1[60 60 60 60 60 1[60 60 1[60 60 60 60 60 60 60 50[60
4[60 60 40[{TeXBase1Encoding ReEncodeFont}23 100.000000
/Courier rf /Ft 138[55 33 1[44 1[55 50 55 8[44 1[44 15[55
9[39 14[33 58[{TeXBase1Encoding ReEncodeFont}11 100.000000
/Times-Bold rf /Fu 134[60 1[86 1[60 33 47 40 1[60 60
60 93 33 2[33 60 60 40 53 60 53 60 53 12[73 3[66 22[60
6[60 1[60 1[30 4[40 40 40[{TeXBase1Encoding ReEncodeFont}28
119.999947 /Times-Roman rf /Fv 134[72 1[104 72 80 48
56 64 1[80 72 80 120 40 2[40 80 72 1[64 80 64 80 72 12[96
80 104 1[88 112 104 4[56 1[112 88 2[104 96 104 7[72 72
6[72 3[48 36 4[48 5[48 29[80 3[{TeXBase1Encoding ReEncodeFont}40
144.000000 /Times-Bold rf /Fw 133[44 50 1[72 1[50 28
39 33 1[50 50 50 78 28 50 1[28 50 50 1[44 50 44 50 44
9[94 3[55 66 1[55 2[89 3[33 72 72 1[61 1[66 1[72 7[50
50 6[50 1[28 2[25 44[{TeXBase1Encoding ReEncodeFont}37
100.000000 /Times-Roman rf /Fx 134[60 3[66 40 47 53 1[66
60 66 100 33 6[53 66 1[66 60 13[66 3[93 1[113 3[47 6[80
66[{TeXBase1Encoding ReEncodeFont}19 119.999947 /Times-Bold
rf /Fy 134[86 1[124 86 96 57 67 76 1[96 86 96 143 48
2[48 96 86 57 76 2[96 86 11[124 1[96 124 1[105 2[163
3[67 134 134 105 115 124 124 115 124 7[86 86 6[86 1[48
2[43 44[{TeXBase1Encoding ReEncodeFont}38 172.833374
/Times-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%PaperSize: a4

%%EndSetup
%%Page: 1 1
1 1 bop 691 44 a Fw(A)l(CM)25 b(International)f(Colle)o(giate)g
(Programming)f(Contest)i(1998/99)1082 161 y(Southwestern)f(European)h
(Re)o(gional)f(Contest)1515 551 y Fy(Pr)m(oblem)44 b(A)1338
786 y Fv(Optimal)34 b(Pr)m(ograms)1020 1075 y Ft(Sour)n(ce:)80
b Fs(optimal.\(c|cc|pas|java\))1020 1192 y Ft(Input:)133
b Fs(optimal.in)75 1638 y Fr(As)33 b(you)h(kno)n(w)-6
b(,)36 b(writing)e(programs)h(is)f(often)g(f)o(ar)g(from)g(being)h
(easy)-6 b(.)59 b(Things)35 b(become)f(e)n(v)o(en)g(harder)h(if)e(your)
75 1751 y(programs)d(ha)n(v)o(e)e(to)h(be)f(as)g(f)o(ast)g(as)g
(possible.)45 b(And)28 b(sometimes)h(there)g(is)f(reason)i(for)e(them)g
(to)g(be.)43 b(Man)o(y)28 b(lar)n(ge)75 1864 y(programs)38
b(such)e(as)g(operating)j(systems)e(or)f(databases)j(ha)n(v)o(e)d
(\223bottlenecks\224)41 b(\226)35 b(se)o(gments)i(of)f(code)h(that)g
(get)75 1976 y(e)o(x)o(ecuted)f(o)o(v)o(er)f(and)g(o)o(v)o(er)f(again,)
k(and)d(mak)o(e)f(up)h(for)g(a)f(lar)n(ge)h(portion)i(of)d(the)h(total)
g(running)i(time.)61 b(Here)34 b(it)75 2089 y(usually)23
b(pays)g(to)e(re)n(write)h(that)g(code)g(portion)h(in)f(assembly)h
(language,)h(since)e(e)n(v)o(en)g(small)f(gains)i(in)e(running)i(time)
75 2202 y(will)g(matter)h(a)f(lot)h(if)f(the)h(code)g(is)g(e)o(x)o
(ecuted)h(billions)g(of)f(times.)216 2320 y(In)g(this)g(problem)h(we)e
(will)h(consider)i(the)e(task)g(of)g(automating)i(the)e(generation)j
(of)c(optimal)i(assembly)h(code.)75 2432 y(Gi)n(v)o(en)k(a)h(function)i
(\(as)d(a)h(series)h(of)e(input/output)35 b(pairs\),)e(you)e(are)g(to)g
(come)g(up)f(with)h(the)g(shortest)i(assembly)75 2545
y(program)25 b(that)f(computes)h(this)f(function.)216
2663 y(The)33 b(programs)i(you)f(produce)h(will)e(ha)n(v)o(e)h(to)g
(run)f(on)h(a)f(stack)h(based)h(machine,)h(that)e(supports)i(only)e
(\002)n(v)o(e)75 2776 y(commands:)f Fq(ADD)p Fr(,)22
b Fq(SUB)p Fr(,)g Fq(MUL)p Fr(,)g Fq(DIV)h Fr(and)i Fq(DUP)p
Fr(.)d(The)i(\002rst)h(four)g(commands)h(pop)f(the)g(tw)o(o)f(top)h
(elements)h(from)75 2889 y(the)f(stack)i(and)e(push)h(their)g(sum,)g
(dif)n(ference,)h(product)g(or)f(inte)o(ger)g(quotient)2550
2856 y Fp(1)2590 2889 y Fr(,)f(respecti)n(v)o(ely)-6
b(,)28 b(on)d(the)h(stack.)35 b(The)75 3001 y Fq(DUP)21
b Fr(command)k(pushes)g(an)e(additional)k(cop)o(y)d(of)g(the)g
(top-most)h(stack)f(element)h(on)e(the)h(stack.)216 3119
y(So)i(if)g(the)g(commands)i(are)e(applied)i(to)e(a)g(stack)i(with)e
(the)g(tw)o(o)g(top)h(elements)h Fn(a)d Fr(and)i Fn(b)f
Fr(\(sho)n(wn)h(to)f(the)h(left\),)75 3232 y(the)d(resulting)i(stacks)f
(look)f(as)f(follo)n(ws:)923 4330 y @beginspecial 0 @llx
0 @lly 178 @urx 85 @ury 1133 @rhi @setspecial
%%BeginDocument: eps/optimal.eps
%Magnification: 0.25
/MyAppDict 100 dict dup begin def
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
-13.0 95.0 translate
1 -1 scale
.9 .9 scale % to make patterns same scale as in xfig

% This junk string is used by the show operators
/PATsstr 1 string def
/PATawidthshow { 	% cx cy cchar rx ry string
  % Loop over each character in the string
  {  % cx cy cchar rx ry char
    % Show the character
    dup				% cx cy cchar rx ry char char
    PATsstr dup 0 4 -1 roll put	% cx cy cchar rx ry char (char)
    false charpath		% cx cy cchar rx ry char
    /clip load PATdraw
    % Move past the character (charpath modified the
    % current point)
    currentpoint			% cx cy cchar rx ry char x y
    newpath
    moveto			% cx cy cchar rx ry char
    % Reposition by cx,cy if the character in the string is cchar
    3 index eq {			% cx cy cchar rx ry
      4 index 4 index rmoveto
    } if
    % Reposition all characters by rx ry
    2 copy rmoveto		% cx cy cchar rx ry
  } forall
  pop pop pop pop pop		% -
  currentpoint
  newpath
  moveto
} bind def
/PATcg {
  7 dict dup begin
    /lw currentlinewidth def
    /lc currentlinecap def
    /lj currentlinejoin def
    /ml currentmiterlimit def
    /ds [ currentdash ] def
    /cc [ currentrgbcolor ] def
    /cm matrix currentmatrix def
  end
} bind def
% PATdraw - calculates the boundaries of the object and
% fills it with the current pattern
/PATdraw {			% proc
  save exch
    PATpcalc			% proc nw nh px py
    5 -1 roll exec		% nw nh px py
    newpath
    PATfill			% -
  restore
} bind def
% PATfill - performs the tiling for the shape
/PATfill { % nw nh px py PATfill -
  PATDict /CurrentPattern get dup begin
    setfont
    % Set the coordinate system to Pattern Space
    PatternGState PATsg
    % Set the color for uncolored pattezns
    PaintType 2 eq { PATDict /PColor get PATsc } if
    % Create the string for showing
    3 index string		% nw nh px py str
    % Loop for each of the pattern sources
    0 1 Multi 1 sub {		% nw nh px py str source
	% Move to the starting location
	3 index 3 index		% nw nh px py str source px py
	moveto			% nw nh px py str source
	% For multiple sources, set the appropriate color
	Multi 1 ne { dup PC exch get PATsc } if
	% Set the appropriate string for the source
	0 1 7 index 1 sub { 2 index exch 2 index put } for pop
	% Loop over the number of vertical cells
	3 index 		% nw nh px py str nh
	{			% nw nh px py str
	  currentpoint		% nw nh px py str cx cy
	  2 index show		% nw nh px py str cx cy
	  YStep add moveto	% nw nh px py str
	} repeat		% nw nh px py str
    } for
    5 { pop } repeat
  end
} bind def

% PATkshow - kshow with the current pattezn
/PATkshow {			% proc string
  exch bind			% string proc
  1 index 0 get			% string proc char
  % Loop over all but the last character in the string
  0 1 4 index length 2 sub {
				% string proc char idx
    % Find the n+1th character in the string
    3 index exch 1 add get	% string proe char char+1
    exch 2 copy			% strinq proc char+1 char char+1 char
    % Now show the nth character
    PATsstr dup 0 4 -1 roll put	% string proc chr+1 chr chr+1 (chr)
    false charpath		% string proc char+1 char char+1
    /clip load PATdraw
    % Move past the character (charpath modified the current point)
    currentpoint newpath moveto
    % Execute the user proc (should consume char and char+1)
    mark 3 1 roll		% string proc char+1 mark char char+1
    4 index exec		% string proc char+1 mark...
    cleartomark			% string proc char+1
  } for
  % Now display the last character
  PATsstr dup 0 4 -1 roll put	% string proc (char+1)
  false charpath		% string proc
  /clip load PATdraw
  neewath
  pop pop			% -
} bind def
% PATmp - the makepattern equivalent
/PATmp {			% patdict patmtx PATmp patinstance
  exch dup length 7 add		% We will add 6 new entries plus 1 FID
  dict copy			% Create a new dictionary
  begin
    % Matrix to install when painting the pattern
    TilingType PATtcalc
    /PatternGState PATcg def
    PatternGState /cm 3 -1 roll put
    % Check for multi pattern sources (Level 1 fast color patterns)
    currentdict /Multi known not { /Multi 1 def } if
    % Font dictionary definitions
    /FontType 3 def
    % Create a dummy encoding vector
    /Encoding 256 array def
    3 string 0 1 255 {
      Encoding exch dup 3 index cvs cvn put } for pop
    /FontMatrix matrix def
    /FontBBox BBox def
    /BuildChar {
	mark 3 1 roll		% mark dict char
	exch begin
	Multi 1 ne {PaintData exch get}{pop} ifelse  % mark [paintdata]
	  PaintType 2 eq Multi 1 ne or
	  { XStep 0 FontBBox aload pop setcachedevice }
	  { XStep 0 setcharwidth } ifelse
	  currentdict		% mark [paintdata] dict
	  /PaintProc load	% mark [paintdata] dict paintproc
	end
	gsave
	  false PATredef exec true PATredef
	grestore
	cleartomark		% -
    } bind def
    currentdict
  end				% newdict
  /foo exch			% /foo newlict
  definefont			% newfont
} bind def
% PATpcalc - calculates the starting point and width/height
% of the tile fill for the shape
/PATpcalc {	% - PATpcalc nw nh px py
  PATDict /CurrentPattern get begin
    gsave
	% Set up the coordinate system to Pattern Space
	% and lock down pattern
	PatternGState /cm get setmatrix
	BBox aload pop pop pop translate
	% Determine the bounding box of the shape
	pathbbox			% llx lly urx ury
    grestore
    % Determine (nw, nh) the # of cells to paint width and height
    PatHeight div ceiling		% llx lly urx qh
    4 1 roll				% qh llx lly urx
    PatWidth div ceiling		% qh llx lly qw
    4 1 roll				% qw qh llx lly
    PatHeight div floor			% qw qh llx ph
    4 1 roll				% ph qw qh llx
    PatWidth div floor			% ph qw qh pw
    4 1 roll				% pw ph qw qh
    2 index sub cvi abs			% pw ph qs qh-ph
    exch 3 index sub cvi abs exch	% pw ph nw=qw-pw nh=qh-ph
    % Determine the starting point of the pattern fill
    %(px, py)
    4 2 roll				% nw nh pw ph
    PatHeight mul			% nw nh pw py
    exch				% nw nh py pw
    PatWidth mul exch			% nw nh px py
  end
} bind def

% Save the original routines so that we can use them later on
/oldfill	/fill load def
/oldeofill	/eofill load def
/oldstroke	/stroke load def
/oldshow	/show load def
/oldashow	/ashow load def
/oldwidthshow	/widthshow load def
/oldawidthshow	/awidthshow load def
/oldkshow	/kshow load def

% These defs are necessary so that subsequent procs don't bind in
% the originals
/fill	   { oldfill } bind def
/eofill	   { oldeofill } bind def
/stroke	   { oldstroke } bind def
/show	   { oldshow } bind def
/ashow	   { oldashow } bind def
/widthshow { oldwidthshow } bind def
/awidthshow { oldawidthshow } bind def
/kshow 	   { oldkshow } bind def
/PATredef {
  MyAppDict begin
    {
    /fill { /clip load PATdraw newpath } bind def
    /eofill { /eoclip load PATdraw newpath } bind def
    /stroke { PATstroke } bind def
    /show { 0 0 null 0 0 6 -1 roll PATawidthshow } bind def
    /ashow { 0 0 null 6 3 roll PATawidthshow }
    bind def
    /widthshow { 0 0 3 -1 roll PATawidthshow }
    bind def
    /awidthshow { PATawidthshow } bind def
    /kshow { PATkshow } bind def
  } {
    /fill   { oldfill } bind def
    /eofill { oldeofill } bind def
    /stroke { oldstroke } bind def
    /show   { oldshow } bind def
    /ashow  { oldashow } bind def
    /widthshow { oldwidthshow } bind def
    /awidthshow { oldawidthshow } bind def
    /kshow  { oldkshow } bind def
    } ifelse
  end
} bind def
false PATredef
% Conditionally define setcmykcolor if not available
/setcmykcolor where { pop } {
  /setcmykcolor {
    1 sub 4 1 roll
    3 {
	3 index add neg dup 0 lt { pop 0 } if 3 1 roll
    } repeat
    setrgbcolor - pop
  } bind def
} ifelse
/PATsc {		% colorarray
  aload length		% c1 ... cn length
    dup 1 eq { pop setgray } { 3 eq { setrgbcolor } { setcmykcolor
  } ifelse } ifelse
} bind def
/PATsg {		% dict
  begin
    lw setlinewidth
    lc setlinecap
    lj setlinejoin
    ml setmiterlimit
    ds aload pop setdash
    cc aload pop setrgbcolor
    cm setmatrix
  end
} bind def

/PATDict 3 dict def
/PATsp {
  true PATredef
  PATDict begin
    /CurrentPattern exch def
    % If it's an uncolored pattern, save the color
    CurrentPattern /PaintType get 2 eq {
      /PColor exch def
    } if
    /CColor [ currentrgbcolor ] def
  end
} bind def
% PATstroke - stroke with the current pattern
/PATstroke {
  countdictstack
  save
  mark
  {
    currentpoint strokepath moveto
    PATpcalc				% proc nw nh px py
    clip newpath PATfill
    } stopped {
	(*** PATstroke Warning: Path is too complex, stroking
	  with gray) =
    cleartomark
    restore
    countdictstack exch sub dup 0 gt
	{ { end } repeat } { pop } ifelse
    gsave 0.5 setgray oldstroke grestore
  } { pop restore pop } ifelse
  newpath
} bind def
/PATtcalc {		% modmtx tilingtype PATtcalc tilematrix
  % Note: tiling types 2 and 3 are not supported
  gsave
    exch concat					% tilingtype
    matrix currentmatrix exch			% cmtx tilingtype
    % Tiling type 1 and 3: constant spacing
    2 ne {
	% Distort the pattern so that it occupies
	% an integral number of device pixels
	dup 4 get exch dup 5 get exch		% tx ty cmtx
	XStep 0 dtransform
	round exch round exch			% tx ty cmtx dx.x dx.y
	XStep div exch XStep div exch		% tx ty cmtx a b
	0 YStep dtransform
	round exch round exch			% tx ty cmtx a b dy.x dy.y
	YStep div exch YStep div exch		% tx ty cmtx a b c d
	7 -3 roll astore			% { a b c d tx ty }
    } if
  grestore
} bind def
/PATusp {
  false PATredef
  PATDict begin
    CColor PATsc
  end
} bind def

% this is the pattern fill program from the Second edition Reference Manual
% with changes to call the above pattern fill
% left30
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 32 16 true [ 32 0 0 -16 0 16 ]
	{<c000c000300030000c000c000300030000c000c000300030
	000c000c00030003c000c000300030000c000c0003000300
	00c000c000300030000c000c00030003>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P1 exch def
1.1111 1.1111 scale %restore scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
10 setmiterlimit
n 0 792 m 0 0 l 612 0 l 612 792 l cp clip
 0.01500 0.01500 sc
% Polyline
n 11475 1425 m 12675 1425 l 12675 6225 l 11475 6225 l cp gs col7 0.75 shd ef gr 
% Polyline
n 3075 1425 m 4275 1425 l 4275 6225 l 3075 6225 l cp gs col7 0.75 shd ef gr 
% Polyline
n 7275 1425 m 8475 1425 l 8475 6225 l 7275 6225 l cp gs col7 0.75 shd ef gr 
% Polyline
n 5175 1425 m 6375 1425 l 6375 6225 l 5175 6225 l cp gs col7 0.75 shd ef gr 
% Polyline
n 9375 1425 m 10575 1425 l 10575 6225 l 9375 6225 l cp gs col7 0.75 shd ef gr 
% Polyline
n 975 1425 m 2175 1425 l 2175 6225 l 975 6225 l cp gs col7 0.75 shd ef gr 
% Polyline
n 3000 1500 m 4200 1500 l 4200 6300 l 3000 6300 l cp gs /PC [[1.00 1.00 1.00] [1.00 1.00 1.00]] def
15.00 15.00 sc P1 [16 0 0 -8 200.00 100.00] PATmp PATsp ef gr PATusp 
% Polyline
n 900 1500 m 2100 1500 l 2100 6300 l 900 6300 l cp gs /PC [[1.00 1.00 1.00] [1.00 1.00 1.00]] def
15.00 15.00 sc P1 [16 0 0 -8 60.00 100.00] PATmp PATsp ef gr PATusp 
% Polyline
n 5100 1500 m 6300 1500 l 6300 6300 l 5100 6300 l cp gs /PC [[1.00 1.00 1.00] [1.00 1.00 1.00]] def
15.00 15.00 sc P1 [16 0 0 -8 340.00 100.00] PATmp PATsp ef gr PATusp 
% Polyline
n 11400 1500 m 12600 1500 l 12600 6300 l 11400 6300 l cp gs /PC [[1.00 1.00 1.00] [1.00 1.00 1.00]] def
15.00 15.00 sc P1 [16 0 0 -8 760.00 100.00] PATmp PATsp ef gr PATusp 
% Polyline
n 9300 1500 m 10500 1500 l 10500 6300 l 9300 6300 l cp gs /PC [[1.00 1.00 1.00] [1.00 1.00 1.00]] def
15.00 15.00 sc P1 [16 0 0 -8 620.00 100.00] PATmp PATsp ef gr PATusp 
% Polyline
n 7200 1500 m 8400 1500 l 8400 6300 l 7200 6300 l cp gs /PC [[1.00 1.00 1.00] [1.00 1.00 1.00]] def
15.00 15.00 sc P1 [16 0 0 -8 480.00 100.00] PATmp PATsp ef gr PATusp 
7.500 slw
% Polyline
n 900 2700 m 2100 2700 l gs col-1 s gr 
% Polyline
n 900 2100 m 2100 2100 l gs col-1 s gr 
% Polyline
n 900 3300 m 2100 3300 l gs col-1 s gr 
15.000 slw
% Polyline
n 900 1500 m 2100 1500 l 2100 6300 l 900 6300 l cp gs col0 s gr 
/Times-Roman ff 375.00 scf sf
1395 3660 m
gs 1 -1 sc (a) col0 sh gr
/Times-Roman ff 375.00 scf sf
1380 4305 m
gs 1 -1 sc (b) col0 sh gr
/Times-Roman ff 375.00 scf sf
1335 6000 m
gs 1 -1 sc (...) col0 sh gr
/Times-Roman ff 375.00 scf sf
1395 4890 m
gs 1 -1 sc (c) col0 sh gr
7.500 slw
% Polyline
n 3000 5100 m 4200 5100 l gs col-1 s gr 
% Polyline
n 3000 4500 m 4200 4500 l gs col-1 s gr 
/Times-Roman ff 375.00 scf sf
1305 5445 m
gs 1 -1 sc (...) col0 sh gr
% Polyline
n 3000 1500 m 3000 1500 l 3000 1500 l 3000 1500 l cp gs col-1 s gr 
% Polyline
n 3000 2700 m 4200 2700 l gs col-1 s gr 
% Polyline
n 3000 2100 m 4200 2100 l gs col-1 s gr 
% Polyline
n 900 3900 m 2100 3900 l gs col-1 s gr 
% Polyline
n 3000 1500 m 4200 1500 l 4200 6300 l 3000 6300 l cp gs col-1 s gr 
15.000 slw
% Polyline
n 3000 1500 m 4200 1500 l 4200 6300 l 3000 6300 l cp gs col0 s gr 
7.500 slw
% Polyline
n 3000 5700 m 4200 5700 l gs col-1 s gr 
% Polyline
n 5100 1500 m 6300 1500 l 6300 6300 l 5100 6300 l cp gs col-1 s gr 
% Polyline
n 3000 3900 m 4200 3900 l gs col-1 s gr 
% Polyline
n 900 4500 m 2100 4500 l gs col-1 s gr 
% Polyline
n 5100 4500 m 6300 4500 l gs col-1 s gr 
% Polyline
n 5100 3900 m 6300 3900 l gs col-1 s gr 
% Polyline
n 5100 3300 m 6300 3300 l gs col-1 s gr 
% Polyline
n 5100 2700 m 6300 2700 l gs col-1 s gr 
% Polyline
n 3000 3300 m 4200 3300 l gs col-1 s gr 
% Polyline
n 900 5100 m 2100 5100 l gs col-1 s gr 
% Polyline
n 5100 1500 m 5100 1500 l 5100 1500 l 5100 1500 l cp gs col-1 s gr 
15.000 slw
% Polyline
n 5100 1500 m 6300 1500 l 6300 6300 l 5100 6300 l cp gs col0 s gr 
7.500 slw
% Polyline
n 7200 1500 m 7200 1500 l 7200 1500 l 7200 1500 l cp gs col-1 s gr 
% Polyline
n 7200 1500 m 8400 1500 l 8400 6300 l 7200 6300 l cp gs col-1 s gr 
% Polyline
n 7200 5700 m 8400 5700 l gs col-1 s gr 
% Polyline
n 7200 5100 m 8400 5100 l gs col-1 s gr 
% Polyline
n 7200 4500 m 8400 4500 l gs col-1 s gr 
% Polyline
n 7200 3900 m 8400 3900 l gs col-1 s gr 
% Polyline
n 7200 3300 m 8400 3300 l gs col-1 s gr 
% Polyline
n 7200 2700 m 8400 2700 l gs col-1 s gr 
% Polyline
n 7200 2100 m 8400 2100 l gs col-1 s gr 
% Polyline
n 900 5700 m 2100 5700 l gs col-1 s gr 
% Polyline
n 5100 5100 m 6300 5100 l gs col-1 s gr 
15.000 slw
% Polyline
n 7200 1500 m 8400 1500 l 8400 6300 l 7200 6300 l cp gs col0 s gr 
7.500 slw
% Polyline
n 5100 5700 m 6300 5700 l gs col-1 s gr 
% Polyline
n 9300 1500 m 10500 1500 l 10500 6300 l 9300 6300 l cp gs col-1 s gr 
% Polyline
n 9300 5700 m 10500 5700 l gs col-1 s gr 
% Polyline
n 9300 5100 m 10500 5100 l gs col-1 s gr 
% Polyline
n 9300 4500 m 10500 4500 l gs col-1 s gr 
% Polyline
n 9300 3900 m 10500 3900 l gs col-1 s gr 
% Polyline
n 9300 3300 m 10500 3300 l gs col-1 s gr 
% Polyline
n 9300 2700 m 10500 2700 l gs col-1 s gr 
% Polyline
n 9300 2100 m 10500 2100 l gs col-1 s gr 
% Polyline
n 900 1500 m 2100 1500 l 2100 6300 l 900 6300 l cp gs col-1 s gr 
% Polyline
n 5100 2100 m 6300 2100 l gs col-1 s gr 
15.000 slw
% Polyline
n 9300 1500 m 10500 1500 l 10500 6300 l 9300 6300 l cp gs col0 s gr 
7.500 slw
% Polyline
n 11400 1500 m 11400 1500 l 11400 1500 l 11400 1500 l cp gs col-1 s gr 
% Polyline
n 11400 1500 m 12600 1500 l 12600 6300 l 11400 6300 l cp gs col-1 s gr 
% Polyline
n 11400 5700 m 12600 5700 l gs col-1 s gr 
% Polyline
n 11400 5100 m 12600 5100 l gs col-1 s gr 
% Polyline
n 11400 4500 m 12600 4500 l gs col-1 s gr 
% Polyline
n 11400 3900 m 12600 3900 l gs col-1 s gr 
% Polyline
n 11400 3300 m 12600 3300 l gs col-1 s gr 
% Polyline
n 11400 2700 m 12600 2700 l gs col-1 s gr 
% Polyline
n 11400 2100 m 12600 2100 l gs col-1 s gr 
% Polyline
n 900 1500 m 900 1500 l 900 1500 l 900 1500 l cp gs col-1 s gr 
% Polyline
n 9300 1500 m 9300 1500 l 9300 1500 l 9300 1500 l cp gs col-1 s gr 
15.000 slw
% Polyline
n 11400 1500 m 12600 1500 l 12600 6300 l 11400 6300 l cp gs col0 s gr 
/Times-Roman ff 375.00 scf sf
3495 4890 m
gs 1 -1 sc (c) col0 sh gr
/Times-Roman ff 375.00 scf sf
3405 5445 m
gs 1 -1 sc (...) col0 sh gr
/Times-Roman ff 375.00 scf sf
3435 6000 m
gs 1 -1 sc (...) col0 sh gr
/Times-Roman ff 375.00 scf sf
5595 4890 m
gs 1 -1 sc (c) col0 sh gr
/Times-Roman ff 375.00 scf sf
5505 5445 m
gs 1 -1 sc (...) col0 sh gr
/Times-Roman ff 375.00 scf sf
5535 6000 m
gs 1 -1 sc (...) col0 sh gr
/Times-Roman ff 375.00 scf sf
7695 4890 m
gs 1 -1 sc (c) col0 sh gr
/Times-Roman ff 375.00 scf sf
7605 5445 m
gs 1 -1 sc (...) col0 sh gr
/Times-Roman ff 375.00 scf sf
7635 6000 m
gs 1 -1 sc (...) col0 sh gr
/Times-Roman ff 375.00 scf sf
9795 4890 m
gs 1 -1 sc (c) col0 sh gr
/Times-Roman ff 375.00 scf sf
9705 5445 m
gs 1 -1 sc (...) col0 sh gr
/Times-Roman ff 375.00 scf sf
9735 6000 m
gs 1 -1 sc (...) col0 sh gr
/Times-Roman ff 375.00 scf sf
11895 3660 m
gs 1 -1 sc (a) col0 sh gr
/Times-Roman ff 375.00 scf sf
11880 4305 m
gs 1 -1 sc (b) col0 sh gr
/Times-Roman ff 375.00 scf sf
11895 4890 m
gs 1 -1 sc (c) col0 sh gr
/Times-Roman ff 375.00 scf sf
11805 5445 m
gs 1 -1 sc (...) col0 sh gr
/Times-Roman ff 375.00 scf sf
11835 6000 m
gs 1 -1 sc (...) col0 sh gr
/Times-Roman ff 375.00 scf sf
3300 4305 m
gs 1 -1 sc (a+b) col0 sh gr
/Times-Roman ff 375.00 scf sf
5385 4320 m
gs 1 -1 sc (b-a) col0 sh gr
/Times-Roman ff 375.00 scf sf
7515 4335 m
gs 1 -1 sc (a*b) col0 sh gr
/Times-Roman ff 375.00 scf sf
9645 4335 m
gs 1 -1 sc (b/a) col0 sh gr
/Times-Roman ff 375.00 scf sf
11880 3090 m
gs 1 -1 sc (a) col0 sh gr
/Times-Roman ff 300.00 scf sf
1200 1170 m
gs 1 -1 sc (Stack) col0 sh gr
/Times-Roman ff 300.00 scf sf
1155 840 m
gs 1 -1 sc (Initial) col0 sh gr
/Times-Roman ff 375.00 scf sf
7395 1035 m
gs 1 -1 sc (MUL) col0 sh gr
/Times-Roman ff 375.00 scf sf
5355 1020 m
gs 1 -1 sc (SUB) col0 sh gr
/Times-Roman ff 375.00 scf sf
3225 1020 m
gs 1 -1 sc (ADD) col0 sh gr
/Times-Roman ff 375.00 scf sf
9570 1020 m
gs 1 -1 sc (DIV) col0 sh gr
/Times-Roman ff 375.00 scf sf
11610 1020 m
gs 1 -1 sc (DUP) col0 sh gr
$F2psEnd
rs
end
%%EndDocument
 @endspecial 216 4565 a(At)k(the)h(be)o(ginning)j(of)d(the)g(e)o(x)o
(ecution)i(of)d(a)h(program,)i(the)e(stack)h(will)e(contain)j(a)e
(single)h(inte)o(ger)g(only:)39 b(the)75 4678 y(input.)32
b(At)23 b(the)i(end)f(of)h(the)f(computation,)j(the)e(stack)g(must)f
(also)h(contain)h(only)f(one)g(inte)o(ger;)h(this)f(number)g(is)f(the)
75 4791 y(result)h(of)e(the)h(computation.)216 4908 y(There)g(are)g
(three)g(cases)h(in)e(which)h(the)g(stack)g(machine)h(enters)g(an)e
(error)i(state:)211 5113 y Fl(\017)46 b Fr(A)23 b Fq(DIV)p
Fr(-command)g(is)g(e)o(x)o(ecuted,)i(and)f(the)g(top-most)h(element)f
(of)g(the)g(stack)g(is)g(0.)211 5318 y Fl(\017)46 b Fr(A)23
b Fq(ADD)p Fr(,)e Fq(SUB)p Fr(,)g Fq(MUL)g Fr(or)j Fq(DIV)p
Fr(-command)f(is)g(e)o(x)o(ecuted)i(when)f(the)g(stack)g(contains)i
(only)e(one)g(element.)211 5523 y Fl(\017)46 b Fr(An)23
b(operation)j(produces)g(a)d(v)n(alue)i(greater)g(than)f(30000)h(in)e
(absolute)j(v)n(alue.)p 75 5622 1470 4 v 176 5683 a Fk(1)209
5710 y Fj(This)19 b(corresponds)i(to)e Fi(/)f Fj(applied)i(to)f(tw)o(o)
g(inte)o(gers)g(in)f(C/C++,)h(and)g Fi(DIV)f Fj(in)h(P)o(ascal.)1890
5960 y Fr(1)p eop
%%Page: 2 2
2 2 bop 75 44 a Fx(Input)75 251 y Fr(The)22 b(input)i(consists)h(of)d
(a)g(series)i(of)f(function)h(descriptions.)32 b(Each)23
b(description)j(starts)d(with)g(a)f(line)h(containing)j(a)75
364 y(single)d(inte)o(ger)g Fn(n)f Fr(\()p Fn(n)d Fl(\024)f
Fr(10\),)23 b(the)f(number)h(of)e(input/output)26 b(pairs)d(to)f(follo)
n(w)-6 b(.)28 b(The)21 b(follo)n(wing)j(tw)o(o)d(lines)i(contains)75
477 y Fn(n)k Fr(inte)o(gers)i(each:)38 b Fn(x)728 491
y Fp(1)766 477 y Fm(;)10 b Fn(x)841 491 y Fp(2)879 477
y Fm(;)g(:)g(:)g(:)h(;)f Fn(x)1095 491 y Fe(n)1160 477
y Fr(in)27 b(the)h(\002rst)f(line)h(\(all)g(dif)n(ferent\),)j(and)d
Fn(y)2464 491 y Fp(1)2501 477 y Fm(;)10 b Fn(y)2576 491
y Fp(2)2614 477 y Fm(;)g(:)g(:)g(:)h(;)f Fn(y)2830 491
y Fe(n)2895 477 y Fr(in)28 b(the)f(second)i(line.)42
b(The)75 590 y(numbers)25 b(will)e(be)h(no)f(more)h(than)g(30000)h(in)e
(absolute)j(v)n(alue.)216 703 y(The)d(input)i(is)e(terminated)j(by)d(a)
g(test)h(case)h(starting)g(with)e Fn(n)e Fh(=)f Fr(0.)28
b(This)c(test)g(case)g(should)h(not)f(be)f(processed.)75
995 y Fx(Output)75 1202 y Fr(Y)-10 b(ou)36 b(are)h(to)g(\002nd)f(the)h
(shortest)i(program)f(that)f(computes)h(a)e(function)53
b Fn(f)13 b Fr(,)39 b(such)f(that)51 b Fn(f)13 b Fh(\()p
Fn(x)3085 1216 y Fe(i)3108 1202 y Fh(\))28 b(=)f Fn(y)3309
1216 y Fe(i)3368 1202 y Fr(for)37 b(all)g Fn(i)27 b Fl(2)75
1315 y(f)p Fr(1)p Fm(;)10 b(:)g(:)g(:)i(;)e Fn(n)p Fl(g)p
Fr(.)43 b(This)28 b(implies)h(that)g(the)f(program)h(you)g(output)h
(may)e(not)g(enter)h(an)f(error)h(state)g(if)f(e)o(x)o(ecuted)i(on)e
(the)75 1428 y(inputs)g Fn(x)363 1442 y Fe(i)412 1428
y Fr(\(although)h(it)e(may)f(enter)i(an)e(error)i(state)f(for)g(other)h
(inputs\).)40 b(Consider)28 b(only)g(programs)g(that)f(ha)n(v)o(e)g(at)
75 1541 y(most)d(10)f(statements.)216 1654 y(F)o(or)28
b(each)i(function)i(description,)h(output)e(\002rst)e(the)h(number)g
(of)f(the)g(description.)49 b(Then)30 b(print)g(out)f(the)h(se-)75
1767 y(quence)i(of)f(commands)h(that)g(mak)o(e)f(up)g(the)g(shortest)i
(program)f(to)e(compute)j(the)e(gi)n(v)o(en)g(function.)53
b(If)31 b(there)g(is)75 1880 y(more)d(than)h(one)f(such)h(program,)h
(print)f(the)f(le)o(xicographically)33 b(smallest.)43
b(If)28 b(there)h(is)e(no)h(program)i(of)d(at)h(most)75
1993 y(10)h(statements)h(that)f(computes)i(the)d(function,)k(print)e
(the)e(string)i(\223)p Fq(Impossible)p Fr(\224.)39 b(If)29
b(the)f(shortest)j(program)75 2106 y(consists)26 b(of)d(zero)h
(commands,)h(print)f(\223)p Fq(Empty)53 b(Sequence)p
Fr(\224.)216 2219 y(Output)24 b(a)f(blank)i(line)f(after)h(each)f(test)
g(case.)75 2511 y Fx(Sample)31 b(Input)75 2718 y Fq(4)75
2831 y(1)54 b(2)g(3)g(4)75 2944 y(0)g(-2)g(-6)f(-12)75
3057 y(3)75 3170 y(1)h(2)g(3)75 3283 y(1)g(11)g(1998)75
3396 y(1)75 3509 y(1998)75 3622 y(1998)75 3734 y(0)75
4027 y Fx(Sample)31 b(Output)75 4234 y Fq(Program)51
b(1)75 4347 y(DUP)i(DUP)g(MUL)h(SUB)75 4573 y(Program)d(2)75
4686 y(Impossible)75 4912 y(Program)g(3)75 5024 y(Empty)h(sequence)1890
5960 y Fr(2)p eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
